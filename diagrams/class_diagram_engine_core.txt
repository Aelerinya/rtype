@startuml

package "Game Engine" #DDDDDD {
    class Game {
        __ private __
        -string m_name
        -map<string, unique_ptr<IModule>> m_modules
        -optional<reference_wrapper<IModule>> displayModule
        -optional<reference_wrapper<IModule>> audioModule
        -optional<reference_wrapper<IModule>> inputModule
        -optional<reference_wrapper<IModule>> networkModule
        __ public __
        +StateMachine stateMachine
        +ComponentStorage componentStorage
        +SystemManager systemManager
        __ public __
        +Game(string name)
        +addModule(string name, IModule module)
        +optional<IModule> getModule(string name)
        +setDisplayModule(string name)
        +setInputModule(string name)
        +setAudioModule(string name)
        +setNetworkModule(string name)
        +run()
    }

    interface IModule {
        __ public __
        +update()
        +~IModule()
    }
    Game *-- IModule

    class StateMachine {
        __ private __
        -stack<unique_ptr<AState>> m_statesStack
        -&Game m_instance;
        __ public __
        +StateMachine(&Game)
        +void setState(unique_ptr<AState> state)
        +void stackState(unique_ptr<AState> state)
        +optional<reference_wrapper<AState>> getCurrentState() const
        +void leaveCurrentState()
        +void update()
    }
    Game *-- StateMachine

    class ComponentStorage {
        __ private __
        -map<typeindex, any> m_storage
        -unsigned m_entityCount
        -map<unsigned, bool> m_dead
        -StateMachine &m_stateMachine
        -map<unsigned, short> m_parentStates
        __ public __
        +ComponentStorage(StateMachine &statemachine)
        +registerComponent<T>()
        +map<unsigned, T> &getComponents<T>()
        +map<unsigned, tuple<T&...>> joinComponents<T...>(map<unsigned, T...> &maps...)
        +EntityBuilder buildEntity()
        +destroyEntity(size_t id)
        __ private __
        -unsigned getNextFreeId()
        -void clearZombies(std::map<unsigned, T>& components)
        -void storeComponent<T>(T component, unsigned index)
    }
    Game *-- ComponentStorage

    class EntityBuilder {
        __ private __
        -unsigned m_id
        -ComponentStorage& m_dest
        __ public __
        +EntityBuilder &withComponent<T>(T component)
        +EntityBuilder &withComponent<T>(std::variant<T> component)
        +EntityBuilder &withComponent<T>(std::optional<T> component)
        +EntityBuilder &withBuilder(const T &builder)
        +size_t build()
        +size_t buildAsOrphan()
    }
    ComponentStorage *-- EntityBuilder

    abstract AState {
        __ private __
        -short m_id
        -static short m_stateCount;
        __ public __
        +short getId()
        +onStart()
        +onPause()
        +onResume()
        +onTick()
        +onStop()
    }
    StateMachine *-- AState

    class SystemStorage {
        __ private __
        -vector<System> m_systems
        __ public __
        +addSystem(System system)
        +runTick(ComponentStorage &components)
    }
    Game *-- SystemStorage

    note left of SystemStorage : Multithreading could be great here

    class System {
        __ private __
        -std::function<void(Game &)> m_call_wrapper
        __ public __
        +System(SystemFunction auto system)
        +System(std::function<void(Game &)> system)
        +void call(Game &) const
    }
    SystemStorage *-- System
}

@enduml
