@startuml

package "Game Engine" #DDDDDD {
    class Game {
        __ private __
        -string m_name
        -map<string, IModule> m_modules
        __ public __
        +StateMachine stateMachine
        __ public __
        +Game(string name)
        +addModule(string name, IModule module)
        +optional<IModule> module(string name)
        +run()
    }

    interface IModule {
        __ public __
        +update()
        +~IModule()
    }
    Game *-- IModule

    class StateMachine {
        __ private __
        -map<string, IState> states
        -string defaultState
        __ public __
        +StateMachine()
        +addState(string name, IState &state)
        +setDefaultState(string name)
        +changeState(string name)
        +stackState(string name)
        +leaveState()
    }
    Game o-- StateMachine

    interface IState {
        __ public __
        +on_start()
        +on_pause()
        +on_resume()
        +tick()
        +on_stop()
    }
    StateMachine *-- IState
}

package "Server" #DDDDDD {
    interface IServerModule {
        __ public __
        +long initInstance(unsigned maxPlayers)
        +optional<Instance> getInstance()
        +~IServerModule()
    }
    IModule <|-- IServerModule

    class Instance {
        __ private __
        -long m_id
        __ public __
        +long getId()
        +bool isFull()
        +unsigned getClientsCount()
        +close()
    }
    IServerModule *-- Instance
}

@enduml
