@startuml
package "Modules" #DDDDDD {
    interface IModule {
        __ public __
        +update()
        +~IModule()
    }

    interface IInputModule {
        __ public __
        +Dimensional getCursorLocation(unsigned player)
        +bool isKeyPressed(unsigned player, Input key)
    }
    IModule <|.. IInputModule

    enum Input {
    }
    Input <-- IInputModule

    interface IDisplayModule {
        __ public __
        +drawSprite(const string& name, Transform const& transform, unsigned id)
    }
    IModule <|.. IDisplayModule

    interface IAudioModule {
        __ public __
        +playSound(const string& name, float volume, float pitch)
        +stopSound(const std::string &name)
    }
    IModule <|.. IAudioModule
}

package "Server" #DDDDDD {
    class MsgQueue<T> {
        __ public __
        +T &front()
        +T &back()
        +bool empty()
        +size_t size()
        +clear()
        +T pop_front()
        +T pop_back()
        +push_back(T)
        +push_front(T)
        +wait()
    }
    class MessageHeader<T> {
        +uint8_t magic1
        +uint8_t magic2
        +T code
        +uint32 size
    }
    class Message<T> {
        __ public __
        +empty()
        +size_t size()
        +bool validMagic(uint8_t m1, uint8_t m2)
        +bool validMagic(std::pair<uint8_t, uint8_t> p)
        +insert<D>(D &data)
        +extract<D>(D &data)
        __ private __
        -IClient<T> remote = nullptr
        -MessageHeader<T> head
        -std::vector<std::byte> body
    }
    Message --> IClient
    Message *-- MessageHeader

    interface IClient<T> {
        __ public __
        +disconnect()
        +send(Message<T>)
        +bool isConnected()
        +std::string getRemoteIp()
        __ protected __
        #readHeader()
        #readBody()
        #writeHeader()
        #writeBody()
        #addToMsgQueue()
        __ public __
        +giveId(uint32_t id)
        +uint32_t getId()
        +operator bool()
    }
    interface IServer<T> {
        __ public __
        +bool start()
        +bool stop()
        +update(size_t maxMessage, bool wait)
        __ protected __
        #onClientDisconnect(IClient<T>)
        #onClientConnect(IClient<T>)
        #waitForClientConnect()
        #msgClient(const Message<T> message, IClient<T> client)
        #msgAll(const Message<T> message, IClient<T> client_to_skip)
        #onMessage(Message<T>)
    }
    IServer --> Message
    IServer --> IClient

    abstract TcpServer<T> {
        __ public __
        +onMessage(Message<T>) = 0
        __ private __
        -MsgQueue<Message<T>> message_queue_in
        -std::deque<Client<T>> clients
        -boost::asio::io_context asio_context
        -std::thread context_thread
        -boost::asio::ip::tcp::acceptor asio_acceptor
        -uint32_t base_id
    }
    IServer <|.. TcpServer
    TcpServer --> Message
    TcpServer *-- MsgQueue

    class TcpClient<T> {
        __ private __
        -boost::asio::ip::tcp::socket socket
        -boost::asio::io_context context
        -MsgQueue<Message<T>> message_queue_in
        -MsgQueue<Message<T>> message_queue_out
        -Message<T> tmp
    }
    IClient <|.. TcpClient
    TcpClient *-- MsgQueue
    TcpClient *-- Message

    abstract UdpServer<T> {
        __ public __
        +onMessage(Message<T>) = 0
        __ private __
        -readHeader()
        -readBody()
        -addToMsgQueue()
        __ private __
        -MsgQueue<Message<T>> message_queue_in
        -std::map<boost::asio::ip::udp::endpoint, UdpClient<T>> client_list
        -boost::asio::io_context asio_context
        -std::thread context_thread
        -Message<T> tmp
        -boost::asio::ip::udp::endpoint tmp_end
        -boost::asio::ip::udp::socket asio_acceptor
        -uint32_t base_id
        -std::array<std::byte, 65535> buffer
    }
    IServer <|.. UdpServer
    UdpServer *-> Message
    UdpServer *-- MsgQueue
    UdpServer *-- UdpClient

    class UdpClient<T> {
        __ public __
        +boost::asio::ip::udp::endpoint remote_endpoint;
        __ private __
        -boost::asio::ip::udp::socket &socket;
        -boost::asio::io_context &context;
        -MsgQueue<Message<T>> message_queue_out
        -Message<T> tmp;
    }
    IClient <|.. UdpClient
    UdpClient *-- MsgQueue
    UdpClient *-> Message

    class Player {
        __ public __
        +bool ready
        +std::set<Input> keys
        +Dimensionnal cur_pos
    }
    Player *-- Input

    class Storage {
        __ public __
        +Storage(std::string base, bool(std::filesystem::path) selector)
        +std::optional<long> getIdFromPath(std::string path)
        +std::optional<std::string> getPathFromId(long id)
        +std::optional<std::string> getPathFromName(std::string name)
        +std::optional<long> getIdFromName(std::string name)
        +std::map<std::string, std::pair<std::string, long>> &getStorage()

        __ private __
        -long base_id = 0
        -std::string base_path
        -std::map<std::string, std::pair<std::string, long>> storage_map
    }

    class GameServer {
        __ private __
        -AssetsServer assets
        -Storage stor
        -std::deque<Sprite> pending_sprite
        -unsigned port
        -std::map<IClient, Player> list
        __ public __
        +GameServer(unsigned port, std::filesystem::path assets_path)
        +onMessage(Message msg)
    }
    UdpServer <|.. GameServer
    IAudioModule <|.. GameServer
    IInputModule <|.. GameServer
    IDisplayModule <|.. GameServer
    GameServer o-- IClient
    GameServer *-- Player
    GameServer *-- AssetsServer
    GameServer *-- Storage
    GameServer --> Message

    class AssetsServer {
    }
    TcpServer <|-- AssetsServer
}
@enduml
